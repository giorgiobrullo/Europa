name: Unity Actions

on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

### Refer to https://game.ci/docs/github/getting-started
jobs:
  buildLinux:
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    name: Build for StandaloneLinux64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-StandaloneLinux64
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneLinux64
      - uses: actions/upload-artifact@v3
        with:
          name: Build-StandaloneLinux64
          path: build

  buildMac:
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    name: Build for StandaloneOSX
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-StandaloneOSX
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneOSX
      - uses: actions/upload-artifact@v3
        with:
          name: Build-StandaloneOSX
          path: build

  buildWindows:
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    name: Build for Windows Platforms
    runs-on: windows-latest
    strategy:
      matrix:
        targetPlatform: [StandaloneWindows, StandaloneWindows64, WSAPlayer]
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build

  release:
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [buildLinux, buildMac, buildWindows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Download Linux Build
        uses: actions/download-artifact@v3
        with:
          name: Build-StandaloneLinux64
          path: ./build/StandaloneLinux64

      - name: Download macOS Build
        uses: actions/download-artifact@v3
        with:
          name: Build-StandaloneOSX
          path: ./build/StandaloneOSX

      - name: Download Windows Build (Standalone)
        uses: actions/download-artifact@v3
        with:
          name: Build-StandaloneWindows
          path: ./build/StandaloneWindows

      - name: Download Windows Build (Standalone64)
        uses: actions/download-artifact@v3
        with:
          name: Build-StandaloneWindows64
          path: ./build/StandaloneWindows64

      - name: Download WSAPlayer Build
        uses: actions/download-artifact@v3
        with:
          name: Build-WSAPlayer
          path: ./build/WSAPlayer

      - name: Upload Linux Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/StandaloneLinux64
          asset_name: StandaloneLinux64.zip
          asset_content_type: application/zip

      - name: Upload macOS Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/StandaloneOSX
          asset_name: StandaloneOSX.zip
          asset_content_type: application/zip

      - name: Upload Windows Build (Standalone)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/StandaloneWindows
          asset_name: StandaloneWindows.zip
          asset_content_type: application/zip

      - name: Upload Windows Build (Standalone64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/StandaloneWindows64
          asset_name: StandaloneWindows64.zip
          asset_content_type: application/zip

      - name: Upload WSAPlayer Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/WSAPlayer
          asset_name: WSAPlayer.zip
          asset_content_type: application/zip
